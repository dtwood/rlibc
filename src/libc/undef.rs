undef!(_Unwind_Backtrace);
undef!(_Unwind_GetIPInfo);
undef!(_Unwind_Resume);
undef!(accept);
undef!(bind);
undef!(chdir);
undef!(chmod);
undef!(closedir);
undef!(connect);
undef!(dup2);
undef!(execvp);
undef!(fchmod);
undef!(fcntl);
undef!(fork);
undef!(free);
undef!(freeaddrinfo);
undef!(fsync);
undef!(gai_strerror);
undef!(getaddrinfo);
undef!(getcwd);
undef!(getpeername);
undef!(getpwuid_r);
undef!(getsockname);
undef!(getsockopt);
undef!(ioctl);
undef!(link);
undef!(listen);
undef!(malloc);
undef!(mkdir);
undef!(nanosleep);
undef!(open);
undef!(pipe);
undef!(posix_memalign);
undef!(pthread_attr_destroy);
undef!(pthread_attr_init);
undef!(pthread_attr_setstacksize);
undef!(pthread_cond_broadcast);
undef!(pthread_cond_destroy);
undef!(pthread_cond_signal);
undef!(pthread_cond_timedwait);
undef!(pthread_cond_wait);
undef!(pthread_create);
undef!(pthread_detach);
undef!(pthread_join);
undef!(pthread_key_create);
undef!(pthread_key_delete);
undef!(pthread_mutex_destroy);
undef!(pthread_mutex_init);
undef!(pthread_mutex_lock);
undef!(pthread_mutex_unlock);
undef!(pthread_mutexattr_destroy);
undef!(pthread_mutexattr_init);
undef!(pthread_mutexattr_settype);
undef!(pthread_rwlock_rdlock);
undef!(pthread_rwlock_unlock);
undef!(pthread_rwlock_wrlock);
undef!(pthread_self);
undef!(pthread_sigmask);
undef!(readlink);
undef!(realloc);
undef!(recvfrom);
undef!(sched_yield);
undef!(send);
undef!(sendto);
undef!(setgroups);
undef!(setsockopt);
undef!(shutdown);
undef!(sigaction);
undef!(sigaltstack);
undef!(sigemptyset);
undef!(socket);
undef!(socketpair);
undef!(symlink);
undef!(sysconf);
undef!(waitpid);

#[cfg(any(target_os = "macos", target_os = "ios"))]
pub mod macos {
    undef!(_Unwind_DeleteException);
    undef!(_Unwind_GetDataRelBase);
    undef!(_Unwind_GetLanguageSpecificData);
    undef!(_Unwind_GetRegionStart);
    undef!(_Unwind_GetTextRelBase);
    undef!(_Unwind_RaiseException);
    undef!(_Unwind_SetGR);
    undef!(_Unwind_SetIP);
    undef!(__error);
    undef!(_tlv_atexit);
    undef!(_tlv_bootstrap);
    undef!(fstat = "fstat$INODE64");
    undef!(ftruncate);
    undef!(lstat = "lstat$INODE64");
    undef!(mach_absolute_time);
    undef!(mach_timebase_info);
    undef!(opendir = "opendir$INODE64");
    undef!(pthread_get_stackaddr_np);
    undef!(pthread_get_stacksize_np);
    undef!(pthread_setname_np);
    undef!(readdir_r = "readdir_r$INODE64");
    undef!(realpath = "realpath$DARWIN_EXTSN");
    undef!(select = "select$1050");
    undef!(stat = "stat$INODE64");
    undef!(strerror_r);
}

#[cfg(any(target_os = "linux"))]
pub mod linux {
    undef!(_Unwind_DeleteException);
    undef!(_Unwind_FindEnclosingFunction);
    undef!(_Unwind_GetDataRelBase);
    undef!(_Unwind_GetLanguageSpecificData);
    undef!(_Unwind_GetRegionStart);
    undef!(_Unwind_GetTextRelBase);
    undef!(_Unwind_RaiseException);
    undef!(_Unwind_SetGR);
    undef!(_Unwind_SetIP);
    undef!(__errno_location);
    undef!(__xpg_strerror_r);
    undef!(_posix_memalign);
    undef!(bsearch);
    undef!(clock_gettime);
    undef!(dl_iterate_phdr);
    undef!(environ);
    undef!(fdatasync);
    undef!(fstat64);
    undef!(ftruncate64);
    undef!(getpagesize);
    undef!(lseek64);
    undef!(lstat64);
    undef!(memrchr);
    undef!(open64);
    undef!(opendir);
    undef!(prctl);
    undef!(pread64);
    undef!(pthread_attr_getguardsize);
    undef!(pthread_attr_getstack);
    undef!(pthread_cond_init);
    undef!(pthread_condattr_destroy);
    undef!(pthread_condattr_init);
    undef!(pthread_condattr_setclock);
    undef!(pthread_getattr_np);
    undef!(pthread_getspecific);
    undef!(pthread_setspecific);
    undef!(pwrite64);
    undef!(readdir64_r);
    undef!(realpath);
    undef!(select);
    undef!(snprintf);
    undef!(stat64);
    undef!(syscall);
}
